SOLUTIONS to LEETCODE Crack SQL INTERVIEW in 50 Qs


1 - Select

  A.1757. Recyclable and Low Fat Products
    select product_id
    from products
    where low_fats = 'y'  and recyclable = 'y';

  B.584. Find Customer Referee
    select name 
    from customer
    where referee_id != 2 or referee_id is null;

  C.595. Big Countries
    select name,population,area
    from world
    where area>=3000000 or population>=25000000;

  D.1148. Article Views I
    select distinct(author_id) as id
    from views
    where author_id = viewer_id
    order by author_id asc;

  e.1683. Invalid Tweets
    select tweet_id
    from tweets
    where length(content)>15;


                         -X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-


2 - Basic Joins

  A.select EmployeeUNI.unique_id , Employees.name
    from Employees
    left join EmployeeUni
    on Employees.id = EmployeeUni.id;

  B.select Product.product_name, Sales.year,Sales.price
    from Sales,Product
    where sales.product_id=product.product_id;

  c.1581. Customer Who Visited but Did Not Make Any


  d.197. Rising Temperature
    SELECT id
    FROM Weather w1
    WHERE temperature > (SELECT temperature FROM Weather w2 WHERE w2.recordDate = w1.recordDate - INTERVAL 1 DAY);

  e.1661. Average Time of Process per Machine
    select a1.machine_id, round(avg(a2.timestamp-a1.timestamp), 3) as processing_time 
    from Activity a1
    join Activity a2 
    on a1.machine_id=a2.machine_id and a1.process_id=a2.process_id
    and a1.activity_type='start' and a2.activity_type='end'
    group by a1.machine_id

  f.577. Employee Bonus
    SELECT name, bonus
    FROM employee
    LEFT JOIN bonus ON employee.empId = bonus.empId
    WHERE bonus < 1000 OR bonus IS NULL;

  g.1280. Students and Examinations
    SELECT s.student_id, s.student_name, sub.subject_name, COALESCE(COUNT(e.subject_name), 0) AS attended_exams
    FROM Students s
    CROSS JOIN Subjects sub
    LEFT JOIN Examinations e ON s.student_id = e.student_id AND sub.subject_name = e.subject_name
    GROUP BY s.student_id, sub.subject_name
    ORDER BY s.student_id,sub.subject_name;


   h.570. Managers with at Least 5 Direct Reports
    SELECT name
    FROM Employee
    WHERE id IN ( SELECT managerId
    FROM Employee
    WHERE managerId IS NOT NULL
    GROUP BY managerId
    HAVING COUNT(id) >= 5
    );


                          -X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-


3 - Basic Aggregate Functions

  A.620. Not Boring Movies
    select *
    from cinema
    where id%2 !=0 and description != 'boring'
    order by rating desc;

  B.1251. Average Selling Price

  C.1075. Project Employees I
    select project_id, round(avg(experience_years),2) as average_years
    from project,employee
    where project.employee_id=employee.employee_id
    group by project_id;

  D.1633. Percentage of Users Attended a Contest


  E.1211. Queries Quality and Percentage
    SELECT query_name, ROUND(SUM(rating / position) / COUNT(rating), 2) AS quality, ROUND((SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) / COUNT(rating)) * 100, 2) AS poor_query_percentage
    FROM queries
    where query_name is not null
    GROUP BY query_name;

  F.1193. Monthly Transactions I


  G.1174. Immediate Food Delivery II
    SELECT ROUND( (SUM(CASE WHEN order_date = customer_pref_delivery_date THEN 1 ELSE 0 END) / COUNT(DISTINCT customer_id)) * 100,2) AS immediate_percentage
    FROM Delivery
    WHERE (customer_id, order_date) IN (
    SELECT customer_id, MIN(order_date) AS first_order_date
    FROM Delivery
    GROUP BY customer_id
    );

  H.550. Game Play Analysis IV
    

                        -X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-
4 - Sorting and Grouping

  A.2356. Number of Unique Subjects Taught by Each Teacher
    select teacher_id, count(distinct subject_id) as cnt
    from teacher
    group by teacher_id;

  B.1141. User Activity for the Past 30 Days I
    SELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users
    FROM activity
    WHERE activity_date >= '2019-06-28' AND activity_date <= '2019-07-27'
    GROUP BY activity_date
    HAVING COUNT(DISTINCT user_id) > 0;

  C.1070. Product Sales Analysis III
    SELECT product_id, MIN(year) AS first_year, quantity, price
    FROM Sales
    WHERE(product_id, year) IN ( SELECT product_id, MIN(year) AS first_year
    FROM Sales
    GROUP BY product_id
    )
    GROUP BY product_id, year, quantity, price;

  D.596. Classes More Than 5 Students
    select class
    from courses
    group  by class
    HAVING COUNT(class) >= 5;

  E.1729. Find Followers Count
    select user_id,count(follower_id) as followers_count
    from followers
    group by user_id
    order by user_id asc;

  F.619. Biggest Single Number
    SELECT MAX(num) AS num
    FROM
    (
        SELECT num
        FROM MyNumbers
        GROUP BY num
         HAVING COUNT(num) = 1
    )
    AS single_numbers;


                             -X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-

5
  g.185. Department Top Three Salaries
    SELECT department.name AS Department, employee.name AS Employee,employee.salary
    FROM employee
    left JOIN department
    ON employee.departmentId = department.id
    WHERE (SELECT COUNT(DISTINCT salary) FROM employee e WHERE e.departmentId = employee.departmentId AND e.salary >= employee.salary) <= 3
    ORDER BY employee.salary DESC;



7
  a.1667.Fix Names in a Table
    SELECT user_id, CONCAT(UPPER(SUBSTRING(name, 1, 1)), LOWER(SUBSTRING(name, 2))) AS name
    FROM Users
    ORDER BY user_id;

  b.1527. Patients With a Condition
    SELECT * FROM PATIENTS WHERE
    CONDITIONS LIKE '% DIAB1%' OR CONDITIONS LIKE 'DIAB1%';

  c.196. Delete Duplicate Emails
    DELETE p1
    FROM Person p1, Person p2
    WHERE p1.email = p2.email AND p1.id > p2.id;

  d.176. Second Highest Salary
    select max(salary) as SecondHighestSalary
    from employee 
    where salary != (select max(salary)
    from employee);

  e.1484. Group Sold Products By The Date
    SELECT
    sell_date,
    COUNT(DISTINCT product) AS num_sold,
    GROUP_CONCAT(distinct product ORDER BY product) AS products
    FROM activities
    GROUP BY sell_date
    ORDER BY sell_date;
                        -X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-

